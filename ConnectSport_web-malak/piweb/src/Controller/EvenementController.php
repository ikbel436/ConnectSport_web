<?php

namespace App\Controller;

use App\Entity\Evenement;
use App\Form\EvenementType;
use App\Repository\EvenementRepository;
use App\Repository\ReservationRepository;
use App\Repository\SponsorRepository;
use ContainerSIXeigs\PaginatorInterface_82dac15;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Knp\Component\Pager\PaginatorInterface;
use App\Repository\CalendarRepository;
use Dompdf\Dompdf;
use Dompdf\Options;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use CMEN\GoogleChartsBundle\GoogleCharts\Charts\PieChart;
/**
 * @Route("/evenement")
 */
class EvenementController extends Controller
{
    /**
     * @Route("/", name="app_evenement_index", methods={"GET"})
     */
    public function index(EntityManagerInterface $entityManager, Request $req, PaginatorInterface $paginator): Response
    {      $user=$this->get('security.token_storage')->getToken()->getUser();
        $donnee = $entityManager
            ->getRepository(Evenement::class)
            ->findByidpp($user->getId());
        $evenements = $paginator->paginate(
            $donnee, // Requête contenant les données à paginer (ici nos articles)
            $req->query->getInt('page', 1), // Numéro de la page en cours, passé dans l'URL, 1 si aucune page
            4 // Nombre de résultats par page

        );
        return $this->render('evenement/index.html.twig', [
            'evenements' => $evenements,
        ]);
    }

    /**
     * @Route("/new", name="app_evenement_new", methods={"GET", "POST"})
     */
    public function new(Request $request, EntityManagerInterface $entityManager): Response
    {       $user=$this->get('security.token_storage')->getToken()->getUser();
        $evenement = new Evenement();
        $form = $this->createForm(EvenementType::class, $evenement);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $file = $form->get("image")->getData();
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            $file->move(
                $this->getParameter('$uploads'),
                $fileName);
            $evenement->setImage($fileName);

            $evenement->setIdpp($user);
            $entityManager->persist($evenement);
            $entityManager->flush();

            return $this->redirectToRoute('app_evenement_index', [], Response::HTTP_SEE_OTHER);
        }


        return $this->render('evenement/new.html.twig', [
            'evenement' => $evenement,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }


    /**
     * @Route("/{id}", name="app_evenement_show", methods={"GET"})
     */
    public function show(Evenement $evenement): Response
    {
        return $this->render('evenement/show.html.twig', [
            'evenement' => $evenement,
        ]);
    }

    /**
     * @Route("/{id}/edit", name="app_evenement_edit", methods={"GET", "POST"})
     */
    public function edit(Request $request, Evenement $evenement, EntityManagerInterface $entityManager): Response
    {
        $form = $this->createForm(EvenementType::class, $evenement);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $file = $form->get("image")->getData();
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            $file->move(
                $this->getParameter('$uploads'),
                $fileName);
            $evenement->setImage($fileName);
            $entityManager->flush();

            return $this->redirectToRoute('app_evenement_index', [], Response::HTTP_SEE_OTHER);
        }

        return $this->render('evenement/edit.html.twig', [
            'evenement' => $evenement,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="app_evenement_delete", methods={"POST"})
     */
    public function delete(Request $request, Evenement $evenement, EntityManagerInterface $entityManager): Response
    {
        if ($this->isCsrfTokenValid('delete' . $evenement->getId(), $request->request->get('_token'))) {
            $entityManager->remove($evenement);
            $entityManager->flush();
        }

        return $this->redirectToRoute('app_evenement_index', [], Response::HTTP_SEE_OTHER);
    }

    /**
     * @Route("/event/back",name="event_back", methods={"GET"})
     */
    public function afficherback(EntityManagerInterface $entityManager): Response
    {
        $event = $entityManager
            ->getRepository(Evenement::class)
            ->findAll();

        return $this->render('evenement/admin.html.twig', [
            'event' => $event,
        ]);
    }

    /**
     * @Route("/event/fan", name="event_fan", methods={"GET"})
     */
    public function indexfan(EntityManagerInterface $entityManager, Request $req, PaginatorInterface $paginator): Response
    {
        $ev = $entityManager
            ->getRepository(Evenement::class)
            ->findAll();

        $evenements = $paginator->paginate(
            $ev, // Requête contenant les données à paginer (ici nos articles)
            $req->query->getInt('page', 1), // Numéro de la page en cours, passé dans l'URL, 1 si aucune page
            4 // Nombre de résultats par page

        );
        return $this->render('evenement/fanEvent.html.twig', [
            'even' => $evenements,
        ]);
    }

    /**
     * @Route("evenement/tri",name="tri", methods={"GET"})
     */
    public function Tri(Request $request, PaginatorInterface $paginator)
    {
        $em = $this->getDoctrine()->getManager();
        $query = $em->createQuery(
            'SELECT e FROM App\Entity\Evenement e ORDER BY e.nom asc'
        );
        $voy = $query->getResult();
        $voyage = $paginator->paginate($voy,
            $request->query->getInt('page', 1),
            6);
        return $this->render('evenement/fanEvent.html.twig',
            ['even' => $voyage]);
    }

    /**
     * @Route("evenement/trip",name="trip", methods={"GET"})
     */
    public function Trip(Request $request, PaginatorInterface $paginator)
    {
        $em = $this->getDoctrine()->getManager();
        $query = $em->createQuery(
            'SELECT e FROM App\Entity\Evenement e ORDER BY e.prix asc'
        );
        $voy = $query->getResult();
        $voyage = $paginator->paginate($voy,
            $request->query->getInt('page', 1),
            6);

        return $this->render('evenement/fanEvent.html.twig',
            ['even' => $voyage]);
    }

    /**
     * @Route("student/rechlike", name="rechlike")
     */
    public function rechercherlike(EvenementRepository $repository, Request $request, PaginatorInterface $paginator): Response
    {
        $nscrech = $request->get('search');
        $voy  = $repository->findOneBySujet($nscrech);

        $voyage = $paginator->paginate($voy,
            $request->query->getInt('page', 1),
            6);
        return $this->render('evenement/fanEvent.html.twig',
            ['even' => $voyage]);

    }

    /**
     * @Route("event/calendar", name="calendar")
     */
    public function calendar(): Response
    {
        // $event = $calendar->findAll();
        $event = $this->getDoctrine()->getRepository(Evenement::class)->findAll();
        $rdvs = [];
        $allDay = true;
        foreach ($event as $event) {
            $rdvs[] = [
                'id' => $event->getId(),
                'start' => $event->getDate()->format('Y-m-d H:i:s'),
                'end' => $event->getDate()->format('Y-m-d H:i:s'),
                'title' => $event->getNom(),
                'description' => $event->getDescription(),
                'backgroundColor' => "#0000ff",
                'borderColor' => "#ff0000",
                'textColor' => "#ffffff",
                'allDay' => $allDay,
            ];
        }
        $data = json_encode($rdvs);
        return $this->render('evenement/test.html.twig', compact('data'));
        /*  return $this->render('base_back/voyage/calendar.html.twig', [
                'controller_name' => 'VoyageController',
            ]);
        */
    }

    /**
     * @param EvenementRepository $repository
     * @return Response
     * @Route ("event/pdf",name="AfficheVoyPDF")
     */
    public function PDF(EvenementRepository $repository)
    {
        // Configure Dompdf according to your needs
        $pdfOptions = new Options();
        $pdfOptions->set('defaultFont', 'Arial');

        // Instantiate Dompdf with our options
        $dompdf = new Dompdf($pdfOptions);

        // Retrieve the HTML generated in our twig file

        $voyage = $repository->findAll();
        $png = file_get_contents("logo.png");
        $pngbase64 = base64_encode($png);
       // $img=$repository->findAll();
       // $imgg=$img->getImage();
        // Load HTML to Dompdf
        $html = $this->renderView('evenement/pdf.html.twig',
            ['destination'=> $voyage,
                "img64"=>$pngbase64,
                ]);

        $dompdf->loadHtml($html);

        // (Optional) Setup the paper size and orientation 'portrait' or 'portrait'
        $dompdf->setPaper('A4', 'landscape');

        // Render the HTML as PDF
        $dompdf->render();

        // Output the generated PDF to Browser (force download)
        $dompdf->stream("pdf.pdf", [
            "Attachment" => false
        ]);
    }
   /* /**
     * @Route("/search", name="ajax_search")
     * @Method("GET")
     */
  /*  public function searchAction(Request $request, EvenementRepository $compagnieaerienneRepository)
    {



        //$em = $this->getDoctrine()->getManager();
        $requestString = $request->get('q');
        $entities =  $compagnieaerienneRepository->findEntitiesByString($requestString);
        if(!$entities) {
            return new JsonResponse(["message" => 'Aucun evenement existant!']);
        } else {
            $serializer = new Serializer([new ObjectNormalizer()]);
            $test = $serializer->normalize($entities, 'json', ['attributes' => ['id', 'nom','description', 'image']]);
            return new JsonResponse($test);
        }

    }*/
    /**
     * @Route("/shooo/{id}", name="showReserv")
     */
    public function ShowStuByClass(EvenementRepository   $repF, ReservationRepository $repS, $id)
    {

        $four=$repF->find($id);
        $sto=$repS->finbyrev($four->getId());
        return $this->render('evenement/reserv.html.twig', array(
            "fours" => $four,
            "stos"=>$sto));

    }

    /**
     * @Route("event/chartjs", name="chartjs")
     */
    public function statistiques(EntityManagerInterface $entityManager ): Response

    {
        $produit = $entityManager
            ->getRepository(Evenement::class)
            ->findAll();

        $tu=0;
        $ar=0;
        $mah=0;
        $sou=0;

        // On "démonte" les données pour les séparer tel qu'attendu par ChartJS
        foreach ($produit as $pr)
        {
            if (  $pr->getLieu()=="Tunis")  :

                $tu+=1;
            elseif ($pr->getLieu()=="Ariana"):

                $ar+=1;
            elseif ($pr->getLieu()=="Mahdia"):

                $mah+=1;
            elseif ($pr->getLieu()=="Sousse"):

                $sou+=1;

            endif;

        }

        //$l=sizeof($voyageOrganises);
        //echo "alert('$l');";
        $pieChart = new PieChart();
        $pieChart->getData()->setArrayToDataTable(
            [['lieu', 'lieu'],
                ['Tunis',     $tu],
                ['Ariana',      $ar],
                ['Mahdia',$mah],
                ['Sousse',$sou]
            ]);
        $pieChart->getOptions()->setColors(['#ffd700', '#C0C0C0','B38E86','D55438']);

        $pieChart->getOptions()->setHeight(500);
        $pieChart->getOptions()->setWidth(900);
        $pieChart->getOptions()->getTitleTextStyle()->setBold(true);
        $pieChart->getOptions()->getTitleTextStyle()->setColor('#009900');
        $pieChart->getOptions()->getTitleTextStyle()->setItalic(true);
        $pieChart->getOptions()->getTitleTextStyle()->setFontName('Arial');
        $pieChart->getOptions()->getTitleTextStyle()->setFontSize(20);
//        *****

        return $this->render('evenement/chartjs.html.twig',array(
            'piechart' => $pieChart


        ) );
    }

    /**
     * @Route("event/stats", name="stats")
     */
    public function statistiquess(ReservationRepository $evRepo)
    {

        $evenement = $evRepo->countByevent();

        $dates = [];
        $evenementCount = [];




        foreach($evenement as $evenements){
            $dates[] = $evenements['name'];
            $evenementCount[] = $evenements['count'];
        }

        return $this->render('reservation/stat.html.twig', [

            'dates' => json_encode($dates),
            'evenementCount' => json_encode($evenementCount),
        ]);
    }


}
