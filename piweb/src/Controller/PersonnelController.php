<?php

namespace App\Controller;
use CMEN\GoogleChartsBundle\GoogleCharts\Charts\PieChart;
use Symfony\Component\Mailer\Exception\TransportExceptionInterface;
use Symfony\Component\Mailer\MailerInterface;
use Symfony\Component\Mime\Email;
use App\Entity\Personnel;
use App\Form\PersonnelType;
use App\Repository\ContratRepository;
use App\Repository\PersonnelRepository;
use Doctrine\ORM\EntityManagerInterface;
use Dompdf\Dompdf;
use Dompdf\Options;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Knp\Component\Pager\PaginatorInterface;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use Symfony\Component\HttpFoundation\ResponseHeaderBag;
use Twilio\Rest\Client;
/**
 * @Route("/personnel")
 */
class PersonnelController extends AbstractController
{
    /**
     * @Route("/", name="app_personnel_index", methods={"GET"})
     */
    public function index(EntityManagerInterface $entityManager, PaginatorInterface $paginator,Request $request): Response
    {
        $donnees = $entityManager
            ->getRepository(Personnel::class)
            ->findAll();
        $personnels = $paginator->paginate(
            $donnees, // Requête contenant les données à paginer (ici nos articles)
            $request->query->getInt('page', 1), // Numéro de la page en cours, passé dans l'URL, 1 si aucune page
            3 // Nombre de résultats par page
        );
        return $this->render('personnel/index.html.twig', [
            'personnels' => $personnels,
        ]);
    }

    /**
     * @Route("/new", name="app_personnel_new", methods={"GET", "POST"})
     */
    public function new(Request $request, EntityManagerInterface $entityManager,MailerInterface $mailer): Response
    {
        $personnel = new Personnel();
        $form = $this->createForm(PersonnelType::class, $personnel);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $file = $form->get("image")->getData();
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
            $file->move(
                $this->getParameter('$uploads'),
                $fileName);
            $personnel->setImage($fileName);
            $entityManager->persist($personnel);
            $entityManager->flush();
//  send an email
            $email = (new Email())
                ->from('benmansourmalak18@gmail.com')
                ->to((string)$personnel->getMail())
                ->priority(Email::PRIORITY_HIGH)
                ->subject('[Connect Sport Application] Compte crée !')
                //->text('Sending emails is fun again!')
                ->html('<p>Bonjour cher(e) Mr/Mme </p><br>
           <p>Vous faites partie maintenant de notre application : votre compte a été bien créer par votre responsable ' . '</p><br>');
            $mailer->send($email);
// end mail

            return $this->redirectToRoute('app_personnel_index', [], Response::HTTP_SEE_OTHER);
        }

        return $this->render('personnel/new.html.twig', [
            'personnel' => $personnel,
            'form' => $form->createView(),
        ]);
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/{id}", name="app_personnel_show", methods={"GET"})
     */
    public function show(Personnel $personnel): Response
    {
        return $this->render('personnel/show.html.twig', [
            'personnel' => $personnel,
        ]);
    }


    /**
     * @Route("/{id}/edit", name="app_personnel_edit", methods={"GET", "POST"})
     */
    public function edit(Request $request, Personnel $personnel, EntityManagerInterface $entityManager): Response
    {
        $form = $this->createForm(PersonnelType::class, $personnel);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $file = $form->get("image")->getData();
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
            $file->move(
                $this->getParameter('$uploads'),
                $fileName);
            $personnel->setImage($fileName);
            $entityManager->flush();

            return $this->redirectToRoute('app_personnel_index', [], Response::HTTP_SEE_OTHER);
        }

        return $this->render('personnel/edit.html.twig', [
            'personnel' => $personnel,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="app_personnel_delete", methods={"POST"})
     */
    public function delete(Request $request, Personnel $personnel, EntityManagerInterface $entityManager): Response
    {
        if ($this->isCsrfTokenValid('delete'.$personnel->getId(), $request->request->get('_token'))) {
            $entityManager->remove($personnel);
            $entityManager->flush();
        }

        return $this->redirectToRoute('app_personnel_index', [], Response::HTTP_SEE_OTHER);
    }

    /**
     * @Route("/personnel/fan", name="app_personnel_fan", methods={"GET"})
     */
    public function indexfan(EntityManagerInterface $entityManager,Request $request, PaginatorInterface $paginator): Response
    {
        $donnees = $entityManager
            ->getRepository(Personnel::class)
            ->findAll();
        $personnels = $paginator->paginate(
            $donnees, // Requête contenant les données à paginer (ici nos articles)
            $request->query->getInt('page', 1), // Numéro de la page en cours, passé dans l'URL, 1 si aucune page
            3 // Nombre de résultats par page
        );


        return $this->render('personnel/fanPersonnel.html.twig', [
            'personnels' => $personnels,
        ]);
    }
    /**
     * @Route("/personnel/back", name="app_personnel_back", methods={"GET"})
     */
    public function indexback(EntityManagerInterface $entityManager): Response
    {
        $personnels = $entityManager
            ->getRepository(Personnel::class)
            ->findAll();

        return $this->render('personnel/backPersonnel.html.twig', [
            'personnels' => $personnels,
        ]);
    }
    /**
     * @Route("per/{id}", name="app_show", methods={"GET"})
     */
    public function showfan(Personnel $personnel): Response
    {
        return $this->render('personnel/showfan.html.twig', [
            'personnel' => $personnel,

        ]);
    }



    /**
     * @Route("/personnel/tri",name="tri", methods={"GET"})
     */
    public function Tri(Request $request,PaginatorInterface $paginator)
    {
        $em = $this->getDoctrine()->getManager();
        $query = $em->createQuery(
            'SELECT p FROM App\Entity\Personnel p ORDER BY p.nom asc'
        );
        $donnees = $query->getResult();
        $personnels = $paginator->paginate(
            $donnees, // Requête contenant les données à paginer (ici nos articles)
            $request->query->getInt('page', 1), // Numéro de la page en cours, passé dans l'URL, 1 si aucune page
            3 // Nombre de résultats par page
        );

        return $this->render('personnel/fanPersonnel.html.twig',
            [ 'personnels' => $personnels]);
    }
    /**
     * @Route("evenement/trip",name="trip", methods={"GET"})
     */
    public function Trip(Request $request,PaginatorInterface $paginator)
    {
        $em = $this->getDoctrine()->getManager();
        $query = $em->createQuery(
            'SELECT p FROM App\Entity\Personnel p ORDER BY p.salaire asc'
        );
        $donnees = $query->getResult();
        $personnels = $paginator->paginate(
            $donnees, // Requête contenant les données à paginer (ici nos articles)
            $request->query->getInt('page', 1), // Numéro de la page en cours, passé dans l'URL, 1 si aucune page
            3 // Nombre de résultats par page
        );


        return $this->render('personnel/fanPersonnel.html.twig',
            ['personnels' => $personnels]);
    }
    /**
     * @Route("student/rechlike", name="rechlike")
     */
    public function rechercherlike(PersonnelRepository $repository, Request $request, PaginatorInterface $paginator): Response
    {
        $nscrech = $request->get('search');
        $student = $repository->findOneBySujet($nscrech);

        $personnels = $paginator->paginate(
            $student, // Requête contenant les données à paginer (ici nos articles)
            $request->query->getInt('page', 1), // Numéro de la page en cours, passé dans l'URL, 1 si aucune page
            3 // Nombre de résultats par page
        );
        return $this->render('personnel/fanPersonnel.html.twig',
            ['personnels' => $personnels]);

    }
    /**
     * @param EvenementRepository $repository
     * @return Response
     * @Route ("event/pdf",name="AfficheVoyPDF")
     */
    public function PDF(PersonnelRepository $repository)
    {
        // Configure Dompdf according to your needs
        $pdfOptions = new Options();
        $pdfOptions->set('defaultFont', 'Arial');

        // Instantiate Dompdf with our options
        $dompdf = new Dompdf($pdfOptions);

        // Retrieve the HTML generated in our twig file

        $voyage = $repository->findAll();
        // Load HTML to Dompdf
        $html = $this->renderView('personnel/pdf.html.twig',
            ['destination'=> $voyage]);

        $dompdf->loadHtml($html);

        // (Optional) Setup the paper size and orientation 'portrait' or 'portrait'
        $dompdf->setPaper('A4', 'landscape');

        // Render the HTML as PDF
        $dompdf->render();

        // Output the generated PDF to Browser (force download)
        $dompdf->stream("pdf.pdf", [
            "Attachment" => false
        ]);
    }
    /**
     * @Route("/personnel/excel", name="excel")
     */
 public function excel(PersonnelRepository $repo)
 {

      $personnel=$repo->findAll();
     $spreadsheet = new Spreadsheet();

     /* @var $sheet \PhpOffice\PhpSpreadsheet\Writer\Xlsx\Worksheet */
     $sheet = $spreadsheet->getActiveSheet();
     $x=1;
     foreach ($personnel as $personnel) {
         $sheet->setCellValue('A'.$x, $personnel->getNom());
         $sheet->setCellValue('B'.$x, $personnel->getPrenom());
         $sheet->setCellValue('C'.$x, $personnel->getDatenaissance());
         $sheet->setCellValue('D'.$x, $personnel->getAdresse());
         $sheet->setCellValue('E'.$x, $personnel->getMail());
         $sheet->setCellValue('F'.$x, $personnel->getTel());
         $sheet->setCellValue('G'.$x, $personnel->getSalaire());
         $sheet->setCellValue('H'.$x, $personnel->getSport());
         $sheet->setCellValue('I'.$x, $personnel->getCategorie());
         $sheet->setCellValue('J'.$x, $personnel->getRole());

         $sheet->setTitle("Personnel");
     $x++;
     }

     // Create your Office 2007 Excel (XLSX Format)
     $writer = new Xlsx($spreadsheet);

     // Create a Temporary file in the system
     $fileName = 'Personnel.xlsx';
     $temp_file = tempnam(sys_get_temp_dir(), $fileName);

     // Create the excel file in the tmp directory of the system
     $writer->save($temp_file);

     // Return the excel file as an attachment
     return $this->file($temp_file, $fileName, ResponseHeaderBag::DISPOSITION_INLINE);
     }
    /**
     * @Route("/personnel/stat", name="personnel_stat")
     */
    public function indexAction(){
        $repository = $this->getDoctrine()->getRepository(Personnel::class);
        $personnels = $repository->findAll();
        $em = $this->getDoctrine()->getManager();

        $rd=0;
        $qu=0;
        $x=0;
        $es=0;


        foreach ($personnels as $personnels)
        {
            if (  $personnels->getRole()=='joueur')  :

                $rd+=1;
            elseif ($personnels->getRole()=='entraineur'):

                $qu+=1;
            elseif ($personnels->getRole()=='staff'):

                $x+=1;
            else :
                $es +=1;

            endif;

        }


        $pieChart = new PieChart();
        $pieChart->getData()->setArrayToDataTable(
            [['Personnels', 'nombres'],
                ['joueur',     $rd],
                ['entraineur',      $qu],
                ['staff',      $x]
            ]
        );
        $pieChart->getOptions()->setTitle('stat des personnels selon le role ');
        $pieChart->getOptions()->setHeight(500);
        $pieChart->getOptions()->setWidth(900);
        $pieChart->getOptions()->getTitleTextStyle()->setBold(true);
        $pieChart->getOptions()->getTitleTextStyle()->setColor('#009900');
        $pieChart->getOptions()->getTitleTextStyle()->setItalic(true);
        $pieChart->getOptions()->getTitleTextStyle()->setFontName('Arial');
        $pieChart->getOptions()->getTitleTextStyle()->setFontSize(20);

        return $this->render('personnel/stat.html.twig', array('piechart' => $pieChart));
    }
    /**
     * @Route("/personnel/sms", name="sms")
     */
    public function sms()
    {
        $sid = "ACede242e7d044a866c5c2d331ed520506";
        $token = "d906395c010dc10bb74d970d02623a14";
        $twilio = new Client($sid, $token);
        $message = $twilio->messages
            ->create("+21651693602", // to
                array(
                    "messagingServiceSid" => "MG145b98393e48adbced868e1fa2705efa",
                    "body" => "aujourd'hui c'est votre entrainement"
                )
            );

        print($message->sid);
        return $this->redirectToRoute('app_personnel_index');
    }
}
