<?php

namespace App\Controller;

use App\Entity\Evenement;
use App\Entity\Personne;
use App\Form\PersonneType;
use App\Repository\PersonneRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
use Knp\Component\Pager\PaginatorInterface;
use Dompdf\Dompdf;
use Dompdf\Options;
use MercurySeries\FlashyBundle\FlashyNotifier;
use Symfony\Component\Mailer\Exception\TransportExceptionInterface;
use Symfony\Component\Mailer\MailerInterface;
use Symfony\Component\Mime\Email;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use Symfony\Component\HttpFoundation\ResponseHeaderBag;
use CMEN\GoogleChartsBundle\GoogleCharts\Charts\PieChart;
use Symfony\Bridge\Twig\Mime\TemplatedEmail;
/**
 * @Route("/personne")
 */
class PersonneController extends AbstractController
{
    /**
     * @Route("/", name="app_personne_index", methods={"GET"})
     */
    public function index(PersonneRepository $personneRepository, Request $request, PaginatorInterface $paginator): Response
    {
        $donnes = $this->getDoctrine()->getRepository(Personne::class)->findBy([], ['nom' => 'asc']);
        $personnes = $personneRepository->findAll();
        $personnes = $paginator->paginate(
            $donnes,
            $request->query->getInt('page', 1),
            4
        );
        return $this->render('personne/index.html.twig', [
            'personnes' => $personnes,
        ]);
    }

    /**
     * @Route("/new", name="app_personne_new", methods={"GET", "POST"})
     */
    public function new(Request $request, UserPasswordEncoderInterface $passwordEncoder, FlashyNotifier $flashy): Response
    {
        $personne = new Personne();
        $form = $this->createForm(PersonneType::class, $personne);
        $form->handleRequest($request);
        $entityManager = $this->getDoctrine()->getManager();
        if ($form->isSubmitted() && $form->isValid()) {
            $file = $form->get("image")->getData();
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            $file->move(
                $this->getParameter('$uploads'),
                $fileName);
            $personne->setImage($fileName);


            $personne->setMdp(
                $passwordEncoder->encodePassword(
                    $personne,
                    $form->get('mdp')->getData()
                )
            );
            $entityManager->persist($personne);
            $entityManager->flush();
            $flashy->success('Succes utilisateur bien ajoutÃ©!', 'http://your-awesome-link.com');
            return $this->redirectToRoute('app_personne_index', [], Response::HTTP_SEE_OTHER);
        }

        return $this->render('personne/new.html.twig', [
            'personne' => $personne,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/{id}", name="app_personne_show", methods={"GET"})
     */
    public function show(Personne $personne): Response
    {
        return $this->render('personne/show.html.twig', [
            'personne' => $personne,
        ]);
    }

    /**
     * @Route("/{id}/edit", name="app_personne_edit", methods={"GET", "POST"})
     */
    public function edit(Request $request, Personne $personne): Response
    {
        $form = $this->createForm(PersonneType::class, $personne);
        $form->handleRequest($request);
        $entityManager = $this->getDoctrine()->getManager();
        if ($form->isSubmitted() && $form->isValid()) {
            $file = $form->get("image")->getData();
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            $file->move(
                $this->getParameter('$uploads'),
                $fileName);
            $personne->setImage($fileName);
            $entityManager->flush();

            return $this->redirectToRoute('app_personne_index', [], Response::HTTP_SEE_OTHER);
        }

        return $this->render('personne/edit.html.twig', [
            'personne' => $personne,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="app_personne_delete", methods={"POST"})
     */
    public function delete(Request $request, Personne $personne, FlashyNotifier $flashy): Response
    {
        $entityManager = $this->getDoctrine()->getManager();
        if ($this->isCsrfTokenValid('delete' . $personne->getId(), $request->request->get('_token'))) {
            $entityManager->remove($personne);
            $entityManager->flush();
        }
        $flashy->success(' utilisateur supprime!', 'http://your-awesome-link.com');
        return $this->redirectToRoute('app_personne_index', [], Response::HTTP_SEE_OTHER);
    }

    /**
     * @Route("/afficher",name="affichage")
     */
    public function afficher()
    {
        $repo = $this->getDoctrine()->getRepository(Personne::class);
        $personne = $repo->findAll();
        return $this->render('/personne/index.html.twig', [
            "personnes" => $personne

        ]);

    }

    /**
     * @Route("/recherche/perso",name="recherche")
     */
    public function recherche(PersonneRepository $repo, Request $request, PaginatorInterface $paginator, FlashyNotifier $flashy)
    {
        $data = $request->get('search');
        $personnes1 = $repo->SearchName($data);
        $donnes = $personnes1;
        $personnes = $paginator->paginate(
            $donnes,
            $request->query->getInt('page', 1),
            4
        );
        $flashy->success(' recherche etablie!', 'http://your-awesome-link.com');
        return $this->render('/personne/index.html.twig', array('personnes' => $personnes));
    }

    /**
     * @Route("/personne/recherche1", name="triNom")
     */
    public function triNom(PersonneRepository $personneRepository, PaginatorInterface $paginator, Request $request, FlashyNotifier $flashy): Response
    {
        ;
        $donnes = $personneRepository->listOrderByNom();
        $personnes = $paginator->paginate(
            $donnes,
            $request->query->getInt('page', 1),
            4
        );
        $flashy->success(' trie etablie!', 'http://your-awesome-link.com');
        return $this->render('personne/index.html.twig', [
            'personnes' => $personnes,
        ]);
    }

    /**
     * @Route("/personne/recherche2", name="triAdresse")
     */
    public function triDate(PersonneRepository $personneRepository, PaginatorInterface $paginator, Request $request, FlashyNotifier $flashy): Response
    {
        $donnes = $personneRepository->listOrderByAdresse();
        $personnes = $paginator->paginate(
            $donnes,
            $request->query->getInt('page', 1),
            4
        );
        $flashy->success(' trie etablie!', 'http://your-awesome-link.com');
        return $this->render('personne/index.html.twig', [
            'personnes' => $personnes,
        ]);

    }

    /**
     * @Route("/personne/recherche3", name="triPrenom")
     */
    public function triPrenom(PersonneRepository $personneRepository, PaginatorInterface $paginator, Request $request,FlashyNotifier $flashy): Response
    {
        $donnes = $personneRepository->listOrderByPrenom();
        $personnes = $paginator->paginate(
            $donnes,
            $request->query->getInt('page', 1),
            4
        );
        $flashy->success('trie etablie!', 'http://your-awesome-link.com');
        return $this->render('personne/index.html.twig', [
            'personnes' => $personnes,
        ]);

    }

    /**
     * @Route("/personne/desactiver/{id}", name="desactiver")
     */
    public function personne_desactiver(Request $request, Personne $personne, PersonneRepository $personneRepository, PaginatorInterface $paginator, MailerInterface $mailer, FlashyNotifier $flashy): Response
    {
        $donnes = $this->getDoctrine()->getRepository(Personne::class)->findBy([], ['nom' => 'asc']);
        $personnes = $personneRepository->findAll();
        $personnes = $paginator->paginate(
            $donnes,
            $request->query->getInt('page', 1),
            4
        );
        $entityManager = $this->getDoctrine()->getManager();
        $personne->setEtat("desactive");
        $entityManager->flush();
        //  send an email
        $email = (new TemplatedEmail())
            ->from('benmansourmalak18@gmail.com')
            ->to((string)$personne->getMail())
            ->priority(Email::PRIORITY_HIGH)
            ->subject('[Connect Sport Application] Etat de votre compte !')
            //->text('Sending emails is fun again!')
            ->htmlTemplate('personne/mail.html.twig')
            ->context([
                    'nom'=>$personne->getNom(),
                    'prenom'=>$personne->getPrenom(),
                    'role'=>$personne->getRole(),
                    'etat'=>$personne->getEtat()

                ]
            );
        $mailer->send($email);
        // end mail
        $flashy->success(' utilisateur desactive!', 'http://your-awesome-link.com');
        return $this->render('personne/index.html.twig', [
            'personnes' => $personnes,
        ]);

    }

    /**
     * @Route("/personne/activer/{id}", name="activer")
     */
    public function personne_activer(Request $request, Personne $personne, PersonneRepository $personneRepository, PaginatorInterface $paginator, MailerInterface $mailer): Response
    {
        $donnes = $this->getDoctrine()->getRepository(Personne::class)->findBy([], ['nom' => 'asc']);
        $personnes = $personneRepository->findAll();
        $personnes = $paginator->paginate(
            $donnes,
            $request->query->getInt('page', 1),
            4
        );
        $entityManager = $this->getDoctrine()->getManager();
        $personne->setEtat("desactive");
        $entityManager->flush();
        //  send an email
        $email = (new TemplatedEmail())
            ->from('benmansourmalak18@gmail.com')
            ->to((string)$personne->getMail())
            ->priority(Email::PRIORITY_HIGH)
            ->subject('[Connect Sport Application] Etat de votre compte !')
            //->text('Sending emails is fun again!')
            ->htmlTemplate('personne/mail.html.twig')
            ->context([
                    'nom'=>$personne->getNom(),
                    'prenom'=>$personne->getPrenom(),
                    'role'=>$personne->getRole(),
                    'etat'=>$personne->getEtat()

                ]
            );
        $mailer->send($email);
        // end mail
        return $this->render('personne/index.html.twig', [
            'personnes' => $personnes,
        ]);

    }


    /**
     * @Route("/personne/register", name="app_personne_register", methods={"GET", "POST"})
     */
    public function register(Request $request, UserPasswordEncoderInterface $passwordEncoder): Response
    {
        $personne = new Personne();
        $form = $this->createForm(PersonneType::class, $personne);
        $form->handleRequest($request);
        $entityManager = $this->getDoctrine()->getManager();
        if ($form->isSubmitted() && $form->isValid()) {
            $file = $form->get("image")->getData();
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            $file->move(
                $this->getParameter('$uploads'),
                $fileName);
            $personne->setImage($fileName);


            $personne->setMdp(
                $passwordEncoder->encodePassword(
                    $personne,
                    $form->get('mdp')->getData()
                )
            );
            $entityManager->persist($personne);
            $entityManager->flush();

            return $this->redirectToRoute('app_personne_index', [], Response::HTTP_SEE_OTHER);
        }

        return $this->render('personne/register.html.twig', [
            'personne' => $personne,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/personne/pdf", name="PDFUser", methods={"GET"})
     */
    function UtilisateurPDF(PersonneRepository $repository)
    {
        // Configure Dompdf according to your needs
        $pdfOptions = new Options();
        $pdfOptions->set('defaultFont', 'Arial');

        // Instantiate Dompdf with our options
        $dompdf = new Dompdf($pdfOptions);
        //l'image est situÃ©e au niveau du dossier public
        $png = file_get_contents("image.jpg");
        $pngbase64 = base64_encode($png);

        // Retrieve the HTML generated in our twig file

        $user = $repository->findAll();
        // Load HTML to Dompdf
        $html = $this->renderView('personne/pdfPersonne.html.twig',
            ['user' => $user,
                "img64" => $pngbase64
            ]);

        $dompdf->loadHtml($html);

        // (Optional) Setup the paper size and orientation 'portrait' or 'portrait'
        $dompdf->setPaper('A4', 'landscape');

        // Render the HTML as PDF
        $dompdf->render();

        // Output the generated PDF to Browser (force download)
        $dompdf->stream("pdf.pdf", [
            "Attachment" => false
        ]);
    }
    // ***************** Statistiques *************

    /**
     * @Route("/personne/stat",name="stat")
     */
    public function statistique1(PersonneRepository $repo)
    {
        // On va chercher le nombre de produit publiÃ©es par prix

        $personnes = $this->getDoctrine()->getRepository(Personne::class)->countByActive();
        $personnes2 = $this->getDoctrine()->getRepository(Personne::class)->countRole();
        $personnes3 = $this->getDoctrine()->getRepository(Personne::class)->countNb();
        $role = [];
        $personne1Count = [];
        $equipe = [];
        $personne2Count = [];

        $active = [];
        $personneCount = [];


        // On "dÃ©monte" les donnÃ©es pour les sÃ©parer tel qu'attendu par ChartJS
        foreach ($personnes as $personne) {

            $active[] = $personne['active'];
            $personneCount[] = $personne['count'];
        }
        foreach ($personnes2 as $personne2) {

            $role[] = $personne2['role'];
            $personne1Count[] = $personne2['countt'];
        }
        foreach ($personnes3 as $personne3) {

            $equipe[] = $personne3['equipe'];
            $personne3Count[] = $personne3['counttt'];
        }


        return $this->render('personne/stat.html.twig', [
            'active' => json_encode($active),

            'personneCount' => json_encode($personneCount),
            'role' => json_encode($role),

            'personnecount' => json_encode($personne1Count),
            'equipe' => json_encode($equipe),

            'personcount' => json_encode($personne3Count),


        ]);
    }

// calendar

    /**
     * @Route("/personne/calendar", name="booking_calendar", methods={"GET"})
     */
    public function calendar(): Response
    {
        return $this->render('personne/calendar.html.twig');
    }

    /**
     * @Route("/personne/admin/{id}", name="admin")
     */
    public function personne_admin(Request $request, Personne $personne, PersonneRepository $personneRepository, PaginatorInterface $paginator,MailerInterface $mailer): Response
    {
        $donnes = $this->getDoctrine()->getRepository(Personne::class)->findBy([], ['nom' => 'asc']);
        $personnes = $personneRepository->findAll();
        $personnes = $paginator->paginate(
            $donnes,
            $request->query->getInt('page', 1),
            4
        );
        $entityManager = $this->getDoctrine()->getManager();
        $personne->setRole("admin");
        $entityManager->flush();

        //  send an email
        $email = (new Email())
            ->from('benmansourmalak18@gmail.com')
            ->to((string)$personne->getMail())
            ->priority(Email::PRIORITY_HIGH)
            ->subject('[Connect Sport Application] Etat de votre compte !')
            //->text('Sending emails is fun again!')
            ->html('<p>Bonjour cher(e) Mr/Mme </p><br>
                   <p>Vous faites parties maintenant de la liste des admins de notre application ' . '</p><br>');
        $mailer->send($email);
        // end mail
        return $this->render('personne/index.html.twig', [
            'personnes' => $personnes,
        ]);

    }

// Ajax recherche :

    /**
     * @Route("/personne/searchStudentx ", name="searchStudentx")
     */
    public function searchStudentx(Request $request,NormalizerInterface $Normalizer)
{
     $repository = $this->getDoctrine()->getRepository(Personne::class);
     $requestString=$request->get('searchValue');
     $students = $repository->SearchName($requestString);
     $jsonContent = $Normalizer->normalize($students, 'json',['groups'=>'personnes']);
     $retour=json_encode($jsonContent);
return new Response($retour);
}

// EXCEL :
    /**
     * @Route("/personne/excel", name="excelUser")
     */
    public function excel(PersonneRepository $repo)
    {

        $personnel=$repo->findAll();
        $spreadsheet = new Spreadsheet();

        /* @var $sheet \PhpOffice\PhpSpreadsheet\Writer\Xlsx\Worksheet */
        $sheet = $spreadsheet->getActiveSheet();
        $x=1;
        foreach ($personnel as $personnel) {
            $sheet->setCellValue('A'.$x, $personnel->getNom());
            $sheet->setCellValue('B'.$x, $personnel->getPrenom());
            $sheet->setCellValue('C'.$x, $personnel->getDatenaissance());
            $sheet->setCellValue('D'.$x, $personnel->getAdresse());
            $sheet->setCellValue('E'.$x, $personnel->getMail());
            $sheet->setCellValue('F'.$x, $personnel->getTel());
            $sheet->setCellValue('G'.$x, $personnel->getRole());
            $sheet->setCellValue('H'.$x, $personnel->getMdp());
            $sheet->setCellValue('I'.$x, $personnel->getEtat());

            $sheet->setTitle("Liste des utilisateurs");
            $x++;
        }

        // Create your Office 2007 Excel (XLSX Format)
        $writer = new Xlsx($spreadsheet);

        // Create a Temporary file in the system
        $fileName = 'Utilisateurs.xlsx';
        $temp_file = tempnam(sys_get_temp_dir(), $fileName);

        // Create the excel file in the tmp directory of the system
        $writer->save($temp_file);

        // Return the excel file as an attachment
        return $this->file($temp_file, $fileName, ResponseHeaderBag::DISPOSITION_INLINE);
    }

// profil respo

    /**
     * @Route("/personne/respo", name="profil_respo", methods={"GET"})
     */
    public function profilrespo(): Response
    {

        return $this->render('personne/profilrespo.html.twig');
    }
    // profil fan

    /**
     * @Route("/personne/fan", name="profil_fan", methods={"GET"})
     */
    public function profilfan(): Response
    {

        return $this->render('personne/profilfan.html.twig');
    }

    // google chart

    /**
     * @Route("/personne/statkol", name="adresse_stat")
     */
    public function indexAction(){
        $repository = $this->getDoctrine()->getRepository(Personne::class);
        $coachings = $repository->findAll();
        $em = $this->getDoctrine()->getManager();

        $rd=0;
        $qu=0;
        $es=0;


        foreach ($coachings as $coachings)
        {
            if (  $coachings->getAdresse()=="tunisie")  :

                $rd+=1;
            elseif ($coachings->getAdresse()=="france"):

                $qu+=1;
            else :
                $es +=1;

            endif;

        }




        $pieChart = new PieChart();
        $pieChart->getData()->setArrayToDataTable(
            [['etat', 'nombres'],
                ['tunisie',     $rd],
                ['france',      $qu],
                ['autres',      $es]

            ]
        );
        $pieChart->getOptions()->setTitle('stat  des comptes selon une reparitition gÃ©opraphique ');
        $pieChart->getOptions()->setHeight(500);
        $pieChart->getOptions()->setWidth(900);
        $pieChart->getOptions()->getTitleTextStyle()->setBold(true);
        $pieChart->getOptions()->getTitleTextStyle()->setColor('#009900');
        $pieChart->getOptions()->getTitleTextStyle()->setItalic(true);
        $pieChart->getOptions()->getTitleTextStyle()->setFontName('Arial');
        $pieChart->getOptions()->getTitleTextStyle()->setFontSize(20);
       // ******************




        return $this->render('personne/statistiques.html.twig', array('piechart' => $pieChart));
    }







}